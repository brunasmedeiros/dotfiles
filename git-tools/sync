#!/bin/bash
#
#

### Global Variables and defaults
ANSI_L_BLUE="\033[1;34m"
ANSI_L_GREEN="\033[1;32m"
ANSI_L_RED="\033[1;31m"
ANSI_YELLOW="\033[1;33m"
ANSI_RESET="\033[0m"
CHANGED_STASHED=0
DO_MERGE=0
GIT_RESPONSE=''
QUIET=0
SQUASH=0
VERBOSE=0


### Functions
# Print out usage instructions and then exit
show_usage () {
  echo "Description:"
  echo ""
  echo "Usage: "
  echo "sync [OPTIONS] SHARED_BRANCH_NAME PRIVATE_BRANCH_NAME [MERGE_COMMIT_MESSAGE]"
  echo ""
  echo "Options:"
  echo "-h --help    : Show this help message and then exit"
  echo "-m --merge   : After bringing in any upstream changes and rebasing, merge "
  echo "               local changes into the upstream branch and push it up"
  echo "-q --quiet   : Do not print any regular messages (only errors will be shown)"
  echo "-s --squash  : Squash all the local commits into a single commit"
  echo "-v --verbose : Show extra messages, including the actual git commands run"
  echo ""
  echo "Examples:"
  echo "sync --help"
  echo "sync -v newfeature newfeature-myname"
  echo "sync -qm newfeature newfeature-myname 'my merge commit message'"
  exit 1
}

# Print out a message, unless the --quiet flag was specified
print_message () {
  if [ "${QUIET}" != '1' ]
  then
    echo -e "${1}"
  fi
}

# Print out a message, but only if the --verbose flag was specified
# (and --quiet was not)
print_verbose_message () {
  if [ "${VERBOSE}" = '1' ]
  then
    print_message "${1}"
  fi
}

# Print general conflict help and information
print_conflict_help() {
  # Find all the files in a UU state
  # (these should be the files that have conflicts)
  file_list=$(git status -s | grep -Ee '^UU')

  print_message "The following files are showing conflicts:"
  print_message "${file_list}"
  print_message ""
  print_message "To show the differences for a file, run:"
  print_message "${ANSI_L_BLUE}git diff FILENAME${ANSI_RESET}"
  print_message ""
}

# Print conflict help specific to a conflict during a rebase
print_rebase_conflict_error () {
  print_message ""
  print_message "${ANSI_L_RED}ERROR: ${ANSI_RESET}Conflict during rebase operation!"
  print_message ""
  print_conflict_help
  print_message "After correcting each file, run:"
  print_message "${ANSI_L_BLUE}git add FILENAME${ANSI_RESET}"
  print_message ""
  print_message "Once you are finished, run:"
  print_message "${ANSI_L_BLUE}git rebase --continue${ANSI_RESET}"
  print_message "(and then re-run this utility)"
  print_message ""
  exit 1
}

# Print conflict help specific to a conflict during a merge
print_merge_conflict_error () {
  print_message ""
  print_message "${ANSI_L_RED}ERROR: ${ANSI_RESET}Conflict during merge operation!"
  print_message ""
  print_conflict_help
  print_message "After correcting each file, run:"
  print_message "${ANSI_L_BLUE}git add FILENAME${ANSI_RESET}"
  print_message ""
  print_message "Once you are finished, run:"
  print_message "${ANSI_L_BLUE}git commit${ANSI_RESET}"
  print_message "(and then re-run this utility)"
  print_message ""
  exit 1
}

# Print out a general error message
# (git returned a non-zero but we don't know why)
print_general_error () {
  print_message ""
  print_message "${ANSI_L_RED}ERROR: ${ANSI_RESET}Something went wrong!"
  print_message "I am not really sure what the problem was, but here is git's output:"
  print_message ""
  print_message "${GIT_RESPONSE}"
  print_message ""
  exit 1
}

# A bit of regex to convert a long form parameter into a short form one
convert_long_arg () {
  ARGS=$(echo "${ARGS}" | sed -e "s/${1}/${2}/")
}

# Evaluates the return code from git
# (so we can throw a general error if something went wrong)
check_return () {
  if [ "${1}" != "0" ]
  then
    print_general_error
  fi
}

# Checks GIT_RESPONSE for the given pattern
# Returns 1 (true) if the pattern is found, 0 (false) if not
response_contains () {
  grep_output=$(echo "${GIT_RESPONSE}" | grep -Ece "${1}")
  grep_return_code=$?
  if [ "${grep_return_code}" = "0" ]
  then
    # Grep found 1 or more matches, so return TRUE
    return 1
  else
    # Grep did not fund any matches, so return FALSE
    return 0
  fi
}

# Runs the requested rebase operation, and then checks the output
# If git did not exit succesfully, check the output for a 'Failed to merge' 
# message and then run the appropriate help function
# Otherwise just print a general error message
do_rebase () {
  print_verbose_message "Running: rebase ${1} ${2}"

  GIT_RESPONSE=$(git rebase ${1} ${2} 2>&1)
  return_code=$?
    
  if [ "${return_code}" != "0" ]
  then
    response_contains '^Failed to merge'
    response_check=$?
    if [ "${response_check}" = "1" ]
    then
      print_rebase_conflict_error
    else
      print_general_error
    fi
  fi
}

# Reset back to where we started
do_restore_state () {
  print_message "Restoring original state..."
  print_verbose_message "Running: checkout ${CURRENT_BRANCH}"
  GIT_RESPONSE=$(git checkout ${CURRENT_BRANCH})
  check_return "${?}"
  
  if [ "${CHANGES_STASHED}" = "1" ]
  then
    print_verbose_message "Pop what was stashed back into place"
    print_verbose_message "Running: stash pop"
    GIT_RESPONSE=$(git stash pop)
    check_return "${?}"
  fi

  print_message "Done!"
  print_message ""
}


### MAIN
# Save off the raw command line parameters
# (preserves multi-word arguments for use later)
ARG_1=$1
ARG_2=$2
ARG_3=$3
ARG_4=$4
ARG_5=$5
ARG_6=$6
ARG_7=$7
ARG_8=$8

# Convert any long-form switches into their short form
ARGS=${@}
convert_long_arg '--help' '-h'
convert_long_arg '--merge' '-m'
convert_long_arg '--quiet' '-q'
convert_long_arg '--squash' '-s'
convert_long_arg '--verbose' '-v'
set -- ${ARGS}

# Check options with getopts and set variables appropriately
while getopts ":hmqsv" opt; do
  case $opt in
    h)
      show_usage
      ;;
    m)
      DO_MERGE=1
      ;;
    q)
      QUIET=1
      ;;
    s)
      SQUASH=1
      ;;
    v)
      VERBOSE=1
      ;;
    \?)
      print_message "Invalid option: -${opt}"
      exit 1
      ;;
    :)
      log_message "Option -${opt} requires an argument."
      exit 1
      ;;
  esac
done

# Now that getops is done, slurp up the rest of the command line
# arguments that we care about
first_arg="ARG_${OPTIND}"
let OPTIND=$OPTIND+1
second_arg="ARG_${OPTIND}"
let OPTIND=$OPTIND+1
third_arg="ARG_${OPTIND}"

UPSTREAM_BRANCH=${!first_arg}
PRIVATE_BRANCH=${!second_arg}
COMMIT_MESSAGE=${!third_arg}

if [ "${UPSTREAM_BRANCH}x" = "x" ]
then
  print_message "ERROR: Missing first argument - Shared Branch Name"
  print_message ""
  show_usage
fi

UPSTREAM_UPDATE_ONLY=0
if [ "${PRIVATE_BRANCH}x" = "x" ]
then
  if [ "${UPSTREAM_BRANCH}" = "develop" -o "${UPSTREAM_BRANCH}" = "master" ]
  then
    UPSTREAM_UPDATE_ONLY=1
  else
    print_message "ERROR: Missing second argument - Local Branch Name"
    print_message ""
    show_usage
  fi
elif [ "${PRIVATE_BRANCH}" = "master" -o "${PRIVATE_BRANCH}" = "develop" ]
then
  print_message "ERROR: Cannot use ${PRIVATE_BRANCH} as the Local Branch"
  exit 1
fi

if [ "${DO_MERGE}" = "1" -o "${SQUASH}" = "1" ]
then
  if [ "${COMMIT_MESSAGE}x" = "x" ]
  then
    print_message "ERROR: Missing third argument - Commit Message"
    print_message "A commit message is required when either squashing or merging"
    print_message ""
    show_usage
  fi
fi

# See if there are any uncommitted changes or untracked files
# If there are, set the LOCAL_MODS flag to 1
LOCAL_MODS=0
GIT_STATUS_OUTPUT=$(git status -s)
LOCAL_MOD_COUNT=$(echo "${GIT_STATUS_OUTPUT}" | wc -l | grep -Eve '[0-9]+')
if [ "${LOCAL_MOD_COUNT}" != "0" ]
then
  LOCAL_MODS=1
fi

print_message "Capturing current state..."
# Store current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "${PRIVATE_BRANCH}" = "${CURRENT_BRANCH}" -a "${LOCAL_MODS}" = "1" -a "${DO_MERGE}" = "1" ]
then
  print_message "\n${ANSI_YELLOW}WARNING: ${ANSI_RESET}"
  print_message "Your private branch has uncommitted changes or untracked files, "
  print_message "but you requested a merge into the upstream branch.\n"
  print_message "Affected files:"
  print_message "${ANSI_L_BLUE}${GIT_STATUS_OUTPUT}${ANSI_RESET}\n"
  print_message "If you proceed with the merge, your uncommitted changes will be stashed "
  print_message "for the duration of the operation and then put back in place once the "
  print_message "merge is complete.\n"
  echo -en "${ANSI_YELLOW}Would you like to proceed? (${ANSI_L_GREEN}y${ANSI_YELLOW} or ${ANSI_L_RED}n${ANSI_YELLOW}): ${ANSI_RESET}"
  read response
  case $response in
    y*|Y*)
      # User does not want to quit, so continue on
      ;;
    *)
      # User wants to stop, so exit
      exit 0
      ;;
  esac
fi

# If there were local mods, run stash and see if anything gets stored
CHANGES_STASHED=0
if [ "${LOCAL_MODS}" = "1" ]
then
  # Stash any local changes, if there are any
  print_verbose_message "Running: stash"
  GIT_RESPONSE=$(git stash)
  check_return "${?}"
  response_contains '^Saved'
  response_check=$?
  if [ "${response_check}" = "1" ]
  then
    print_verbose_message "Looks like something got stashed; pop scheduled"
    CHANGES_STASHED=1
  fi
fi

print_message "Updating local version of '${UPSTREAM_BRANCH}'..."
# Git fetch
print_verbose_message "Running: fetch"
GIT_RESPONSE=$(git fetch)
check_return "${?}"

# Git checkout shared branch
print_verbose_message "Running: checkout ${UPSTREAM_BRANCH}"
GIT_RESPONSE=$(git checkout ${UPSTREAM_BRANCH})
check_return "${?}"

# Make sure local branch isn't ahead of origin some how
git status -s | grep -Fe 'Your branch is ahead of ' >/dev/null 2>&1
is_ahead=$?
if [ $is_ahead -eq 0 ]
then
  print_message "ERROR: Local copy of the shared branch has local commits!"
  print_message "(that's bad)"
  print_message "Aborting..."
  exit 1
fi
do_rebase "origin/${UPSTREAM_BRANCH}" "${UPSTREAM_BRANCH}"

if [ "${UPSTREAM_UPDATE_ONLY}" = "1" ]
then
 # If all we need to do is an upstream update, then we are all done
 # reset starting state and exit
 do_restore_state
 exit 0
fi

print_message "Updating local branch '${PRIVATE_BRANCH}' to reflect changes on '${UPSTREAM_BRANCH}'..."
do_rebase "${UPSTREAM_BRANCH}" "${PRIVATE_BRANCH}"

if [ "${SQUASH}" = "1" ]
then
  print_message "Squashing..."
  print_verbose_message "Running: reset --soft ${UPSTREAM_BRANCH} ${PRIVATE_BRANCH}"
  GIT_RESPONSE=$(git reset --soft ${UPSTREAM_BRANCH} ${PRIVATE_BRANCH})
check_return "${?}"
  print_verbose_message "Running: commit -m 'Squash ${COMMIT_MESSAGE}'"
  GIT_RESPONSE=$(git commit -m 'Squash: ${COMMIT_MESSAGE}')
check_return "${?}"
fi

# Only auto-merge-commit if the upstream branch is not 'develop'
if [ "${UPSTREAM_BRANCH}" != "develop" -a ${DO_MERGE} -eq 1 ]
then
  print_message "Adding your local commits to '${UPSTREAM_BRANCH}'..."
  print_verbose_message "Running: checkout ${UPSTREAM_BRANCH}"
  GIT_RESPONSE=$(git checkout ${UPSTREAM_BRANCH})
  check_return "${?}"
  print_verbose_message "Running: merge --no-ff -m 'Auto-Merge from ${PRIVATE_BRANCH}: ${COMMIT_MESSAGE}' ${PRIVATE_BRANCH}"
  GIT_RESPONSE=$(git merge --no-ff -m "Auto-Merge from ${PRIVATE_BRANCH}: ${COMMIT_MESSAGE}" ${PRIVATE_BRANCH} 2>&1)
  return_code=$?
  if [ "${return_code}" != "0" ]
  then
    if [ "$(response_contains '^CONFLICT')" = "1" ]
    then
      print_merge_conflict_error
    else
      print_general_error
    fi
  fi

  print_message "Pushing updated '${UPSTREAM_BRANCH}' to GitHub..."
  print_verbose_message "Running: push -u origin ${UPSTREAM_BRANCH}"
  GIT_RESPONSE=$(git push -u origin ${UPSTREAM_BRANCH})
  check_return "${?}"
  print_message "... push completed."

  # Pull merge commit back into the local branch
  do_rebase "${UPSTREAM_BRANCH}" "${PRIVATE_BRANCH}"
fi

print_message "Pushing updated '${PRIVATE_BRANCH}'..."
print_verbose_message "Running: push origin -f ${PRIVATE_BRANCH}"
GIT_RESPONSE=$(git push origin -f ${PRIVATE_BRANCH})
print_message "... push completed."

do_restore_state

exit 0
